pipeline {
    agent { label 'master' }

    environment{
        REPO_GLUON = "https://github.com/freifunk-gluon/gluon.git"
        REPO_SITE = "https://github.com/divonet/site-multidomain.git"

        DIR_SCRIPTS = "scrpt"
        DATE = sh(returnStdout: true, script: "date '+%Y%m%d-%H%M'").trim()
        SIGN_SECRET = "/gluon-secret/secret"
    }

    stages {
        stage('tmpclean'){
            steps{
                echo "#####################"
                echo "#  Cleaning Output  #"
                echo "#####################"
                sh "rm -rf ./gluon/output"
            }
        }

        stage('clone') {
            steps {
                echo "###################"
                echo "#  Cloning Repos  #"
                echo "###################"

                echo "Checking out gluon version ${GLUON_VERSION}"
                dir("gluon"){
                    sh "git clone ${REPO_GLUON} -b ${GLUON_VERSION} . || true"
                    sh "git fetch --all || true"
                    sh "git reset --hard ${GLUON_VERSION} || true"
                }

                echo "Checking out site config, always update from git"
                dir("gluon/site"){
                    sh "git clone ${REPO_SITE} -b ${VPN}-${BRANCH} . || true"
                    sh "git fetch --all || true"
                    sh "git reset --hard origin/${VPN}-${BRANCH} || true"
                    sh "git pull || true"
                }
            }
        }

        stage('config'){
            steps{
                echo "############################"
                echo "#  Running Config Scripts  #"
                echo "############################"

                script {
                    env.REMOTE_MAINTENANCE = ""
                    if("${REMOTEKEYS}" == "true"){

                        env.REMOTE_MAINTENANCE = "-remote"
                        sh "remote-maintenance/remote-maintenance.pl gluon/site/site.conf"

                        echo "Remote Maintenance Activated"

                    }
                }

                sh "blacklist/blacklist.pl gluon/targets/"
            }
        }

        stage('build'){
            steps{

                echo "##############"
                echo "#  Building  #"
                echo "##############"

                dir("gluon"){

                    sh """
                        #!/usr/bin/env bash
                        FAILEDTARGETS=\"\"
                        make update -j12

                        TARGETCONFIG=${TARGETCONFIG}
                        if [ ! -z \"$TARGETCONFIG\" ]
                        then
                            make GLUON_TARGET=\$TARGETCONFIG GLUON_RELEASE=${GLUON_VERSION}-${VPN}${REMOTE_MAINTENANCE}-${BUILD_NUMBER} GLUON_BRANCH=${BRANCH}${REMOTE_MAINTENANCE} DEFAULT_GLUON_RELEASE=${GLUON_VERSION}${DATE}${REMOTE_MAINTENANCE} ${DEBUGBUILDPARAM} || FAILEDTARGETS=\"\$FAILEDTARGETS\$TARGETCONFIG, \"
                        else
                            for TARGET in \$(make list-targets); do
                                make GLUON_TARGET=\$TARGET GLUON_RELEASE=${GLUON_VERSION}-${VPN}${REMOTE_MAINTENANCE}-${BUILD_NUMBER} GLUON_BRANCH=${BRANCH}${REMOTE_MAINTENANCE} DEFAULT_GLUON_RELEASE=${GLUON_VERSION}${DATE}${REMOTE_MAINTENANCE} ${DEBUGBUILDPARAM} || FAILEDTARGETS=\"\$FAILEDTARGETS\$TARGET, \"
                            done
                        fi
                        
                        make manifest GLUON_BRANCH=${BRANCH}${REMOTE_MAINTENANCE} GLUON_RELEASE=${GLUON_VERSION}-${VPN}${REMOTE_MAINTENANCE}
                        contrib/sign.sh ${SIGN_SECRET} output/images/sysupgrade/${BRANCH}${REMOTE_MAINTENANCE}.manifest
                        if [ \$FAILEDTARGETS!=\"\" ]
                        then
                            echo \"The following targets did not build succesfull: \$FAILEDTARGETS\"
                        fi
                    """

                }
            }
        }
    }
}
