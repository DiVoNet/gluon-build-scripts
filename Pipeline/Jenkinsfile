pipeline {
    agent { label 'master' }

    environment{
        REPO_SCRIPTS = "https://github.com/Netzwerk-Koenigswinter/ffkw-gluon-build-scripts.git"
        REPO_GLUON = "https://github.com/freifunk-gluon/gluon.git"
        REPO_SITE = "https://github.com/Netzwerk-Koenigswinter/site-ffkw-multidomain.git"

        DIR_SCRIPTS = "scrpt"
        DATE = sh(returnStdout: true, script: "date '+%Y%m%d-%H%M'").trim()
        SIGN_SECRET = "/gluon-secret/secret"
    }

    stages {
        stage('tmpclean'){
            steps{
                echo "########################"
                echo "#  Cleaning Workspace  #"
                echo "########################"
                sh "rm -r -f ./*"
            }
        }

        stage('clone') {
            steps {
                echo "###################"
                echo "#  Cloning Repos  #"
                echo "###################"


                echo "Checking out build scripts"
                dir("${DIR_SCRIPTS}"){
                    git "${REPO_SCRIPTS}"
                }

                echo "Checking out gluon version ${VERSION}"
                sh "git clone ${REPO_GLUON} gluon -b ${VERSION}"
                
                echo "Checking out site config"
                dir("gluon/site"){
                    sh "git clone ${REPO_SITE} -b ${VPN}-${BRANCH} ."
                }
            }
        }

        stage('config'){
        	steps{
        		echo "############################"
                echo "#  Running Config Scripts  #"
                echo "############################"




        		script {
        			env.REMOTE_MAINTENANCE = ""
        			if("${REMOTEKEYS}" == "true"){
      					
        				env.REMOTE_MAINTENANCE = "-remote"
        				sh "${DIR_SCRIPTS}/remote-maintenance/remote-maintenance.pl gluon/site/site.conf"
        				
        				echo "Remote Maintenance Activated"
        			
        			}
        		}

        		sh "${DIR_SCRIPTS}/blacklist/blacklist.pl gluon/targets/"
        	}
        }

        stage('build'){
            steps{

            	echo "##############"
            	echo "#  Building  #"
            	echo "##############"

                dir("gluon"){

					sh """
						FAILEDTARGETS = \"\"
						make update -j12
						for TARGET in \$(make list-targets); do
							 make GLUON_TARGET=\$TARGET GLUON_RELEASE=${VERSION}-${VPN}${REMOTE_MAINTENANCE} GLUON_BRANCH=${BRANCH}${REMOTE_MAINTENANCE} DEFAULT_GLUON_RELEASE=${VERSION}${DATE}${REMOTE_MAINTENANCE} -j12 || FAILEDTARGETS += \"\$TARGET \"
						done
                        make manifest GLUON_BRANCH=${BRANCH}${REMOTE_MAINTENANCE} GLUON_RELEASE=${VERSION}-${VPN}${REMOTE_MAINTENANCE}
                        contrib/sign.sh ${SIGN_SECRET} output/images/sysupgrade/${BRANCH}${REMOTE_MAINTENANCE}.manifest
                        if [ \$FAILEDTARGETS != \"\" ]
						then 
    						echo \"The Following Targets did not build succesfull: \$FAILEDTARGETS\"
						fi
					"""

                }
            }
        }

        stage('clean'){
            steps{
                echo "########################"
                echo "#  Cleaning Workspace  #"
                echo "########################"
                //sh "rm -r -f ./*"
            }
        }

    }
}